#!/usr/bin/env ruby
require "bkblz"
require "thor"
require "yaml"

module Bkblz

  module Helper
    def parse_opts
      if options[:config]
        f = options[:config]
        raise "unreadable config file #{f}" unless ::File.readable? f
        Bkblz.configure do |map|
          map.merge YAML.load(::File.read f)
        end
      end
    end

    def run_task(&block)
      begin
        yield
      rescue Bkblz::Task::MissingBucketError => e
        STDERR.puts "Unknown bucket: #{e.message}"
        exit 1
      rescue Bkblz::V1::UnauthorizedRequestError => e
        msg = if options[:config]
                "bad account id or application key, check your auth credentials"
              else
                "use '-c path/to/config.yml' to supply credentials"
              end
        STDERR.puts "Unauthorized request: #{msg}"
        exit 1
      end
    end

    def print_header(header)
      puts ""
      puts "*** #{header} ***"
      puts ""
    end

    def print_model(model)
      puts model.to_yaml
    end
  end

  class Generators < Thor
    include Helper

    desc "config", "generate a bkblz config"
    def config
      map = Bkblz::Config::CONFIG_VARS.dup

      puts "Enter a value for each field and press <enter>."
      puts "To accept the default just press <enter>:"
      puts
      map.inject(map) do |m, (k, v)|
        print "#{k}: #{v}"
        input = STDIN.gets.chomp
        input = v if input.empty?
        input = case v
                when Symbol
                  input.intern
                when !!v == v # Boolean check
                  input == 'true'
                else
                  input
                end
        m[k] = input
        m
      end

      puts
      puts "cat > bkblz.yml <<EOS"
      puts map.to_yaml
      puts "EOS"
    end
  end

  class Bucket < Thor
    include Helper

    desc "list", "lists all of your buckets"
    def list
      parse_opts

      buckets = run_task do
        Bkblz::Task::ListBuckets.run Bkblz.config
      end

      print_header "Buckets"
      buckets.each do |bucket|
        puts bucket.bucket_name
      end
    end

    desc "create <bucket_name>", "creates a new bucket"
    def create(bucket_name)
      parse_opts

      bucket = run_task do
        Bkblz::Task::CreateBucket.run Bkblz.config, :bucket_name => bucket_name
      end
      print_header "New Bucket"
      print_model bucket
    end
  end

  class File < Thor
    include Helper

    desc "upload <bucket_name> <local_file_path>", "upload a local file to B2" +
      " if <local_file_path> is \"-\" (0x2d), then upload will read from STDIN."
    option :file_name, :desc => "remote file name, if not given the basename" +
      " of the local file is used"
    option :gzip, :type => :boolean, :desc => "automatically gzip files"
    def upload(bucket_name, local_file_path)
      parse_opts

      params = {
        :bucket_name => bucket_name,
        :file_name => options[:file_name],
        :gzip => options[:gzip]
      }

      if local_file_path == "-"
        params[:file_body] = STDIN.read
      else
        params[:file_path] = local_file_path
      end

      file_info = run_task do
        Bkblz::Task::UploadFile.run Bkblz.config, params
      end

      print_header "File Info"
      print_model file_info
    end

    desc "downloadbyname <bucket> <name> <dir>", "downloads file by <bucket> " +
      "and <name> to directory <dir>"
    def downloadbyname(bucket_name, file_name, dir_path)
      parse_opts

      file_info = run_task do
        Bkblz::Task::DownloadFile.run Bkblz.config, {
          :file_name => file_name,
          :bucket_name => bucket_name,
          :dir_path => dir_path,
          :use_filename => true
        }
      end

      print_header "File Info"
      print_model file_info
    end

    # TODO(erick): Rename to downloadbyid
    desc "download <id> <dir>", "downloads file <id> to directory <dir>"
    def download(file_id, dir_path)
      parse_opts

      file_info = run_task do
        Bkblz::Task::DownloadFile.run Bkblz.config, {
          :file_id => file_id,
          :dir_path => dir_path,
          :use_filename => options[:by_name]
        }
      end

      print_header "File Info"
      print_model file_info
    end

    desc "list <bucket_name>", "lists files in a bucket"
    option :start_at, :desc => "file name to start listing from, cannot be used with --all"
    option :limit, {
             :desc => "limit of files to list per request",
             :default => 100,
             :type => :numeric
           }
    option :all, :desc => "lists all file versions, cannot be used with --start-at"
    option :with_id, :type => :boolean, :desc => "include file_id in results"
    option :prefix, :desc => "limits results to those that match the prefix"
    option :delimiter, :desc => "combine with prefix to search directories, " +
      "see https://www.backblaze.com/b2/docs/b2_list_file_names.html for usage"
    def list(bucket_name)
      parse_opts

      task = Bkblz::Task::ListFiles.new Bkblz.config
      run_task do

        paged_response = task.run({
          :start_at => options[:start_at],
          :limit => options[:limit],
          :all_versions => options[:all],
          :bucket_name => bucket_name,
          :prefix => options[:prefix],
          :delimiter => options[:delimiter]
        })

        file_printer = lambda do |file|
          puts options[:with_id] ?
            "%s - %s" % [file.file_name, file.file_id] :
            file.file_name
        end

        print_header "Files"
        paged_response.files.each &file_printer
      end
    end

    desc "info <file_id>", "displays info for file with <id>"
    def info(file_id)
      parse_opts

      file_info = run_task do
        Bkblz::Task::GetFileInfo.run Bkblz.config, {
          :file_id => file_id
        }
      end

      print_header "File Info"
      print_model file_info
    end
  end

  class Cli < Thor
    include Helper

    class_option :config, :desc => "path to a yml config file", :aliases => ["-c"],
    :default => ::File.expand_path('~/etc/bkblz/bkblz.yml')

    desc "bucket SUBCOMMAND ...ARGS", "manage backblaze buckets"
    subcommand "bucket", Bucket

    desc "file SUBCOMMAND ...ARGS", "manage backblaze files"
    subcommand "file", File

    desc "gen SUBCOMMAND ...ARGS", "generate bkblz files"
    subcommand "gen", Generators
  end
end

Bkblz::Cli.start ARGV
